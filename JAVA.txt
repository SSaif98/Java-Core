Abstraction:
Process of hiding implementation details from the user. 
User will know what the object works intead how it does.

Abstraction vs Interface:

1. Interface can have abstract methods only.
2. We can only use public access modifer for methods
3. Variable in interface shoyuld be static, public, final
4. Other classes implements interface

1. Abstraction can have abstract methods and non abstract methods.
2. Except private access modifer we can use any modifier for methods
3. Except private access modifer Variable can have any access modifier.
4. Other classes extends abstract class 

Method without body is abstract method.

In interface each method is abstract method with out body.
An abstract class can have abstract method and non abstract methods.

In interface we acheive 100% abstracttion.
In abstract class we acheive partial abstraction.

//because of inheritence we can access parent class method without creating object of that class.
// We can not insteniate parent class method in child class if the class is abstract 

//In abstract class we can not create method with private access modifier as it is made to use it if we use private then we can not use it in other classes.


Concrete Method (with body)
Non Concrete Method (without body)


//Interface has methods without body
//classes should defines and implements method in interface
//Class that is implementing the interface should implement on all methods of interface
//We can define varibales in interface but they should be public
// A class can implements more then one interface by coma separated.

 while(boolean expression){ }
 
 	// Do-While
		// In do while loop for the first time loop will execute always as it do not
		// have any condition to evaluate in start
		

- It you want to access the methods of the class you have to create object of the class like:
	> obj.method
- util is a pkg which hold many classes like ArrayList etc.
- If we create do like this:
	String s= "abc";
	String s1= "abc";
		> Now in above case java will not create 2 separate variable and allocate mamory to it instead it creates only one.

- If we create do like this:
	String s= new String("abc");
	String s1= new String("abc");
		> Now in above case java will create 2 separate objects as we are explicitely saying new keyword
- String is an object that represents sequence of characters
- Methods:
	> public methods can not directly be access in the main class but we have to create Object of it in main class in order to use the method.
	> Public methods can use in any class with in the project by creating object.
	> If we use Static keyword then this method will be converted into class method

INHERITENCE:
\Java donot support multiple inheritence C++ does.


Over Loading:
A class having methods with same name but different arguments (number of arguments or different data type).

Over Rding:
Parent and child class having same method name with same no. of arduments and same data type.


Class variables can be access by using this keyword.

class className(){
	int age=90;
	
	public void getData(){
		int age =8;
		SOP(age + this.age)  //8+90
	}
}


Instance Variable:
Variables that are defined after the class creation.

Static Variables://Class Varible
the one allocated “statically,” which means its lifetime is throughout the program run. 
It is declared with the 'static' keyword and persists its value across the function calls

Static Methods will only accepts static avriables.
Static methods do not need class obj to get accessed. //Static keywords are obj independent . It is class method.
getData();
className.getData();

Pakages:
set of classes, interfaces.

java.io - File reading

pkg name: java.lang 
	(public static void main, array, int, sop) (Default pkg comes with compiler its self.)
pkg: java.util  (all collection interfaces comes with it. )
	- Array List
	- Hashset
	-HashMap
	
User defined pkg:
 those which are developed by users in order to group related classes, interfaces and sub packages

Class A can use Class B directly by creating object if both classes are in same pkg then we do not have to import any pkg we can direct get access of it.

if class A and Class B are not in same pkg and we want to use class A methods in class B then we have to import class A pkg in inclass B
This imported pkg in class B will be called user defined pkg


There are four types of Java access modifiers:

Private: 
The access level of a private modifier is only within the class. It cannot be accessed from outside the class.

Default: 
The access level of a default modifier is only within the package. It cannot be accessed from outside the package. 
If you do not specify any access level, it will be the default.
Within the pkg we do not have to import pkg in other classes and we can directly use it by creating obj of the class.

Protected: 
The access level of a protected modifier is within the package and outside the package through child class. 
If you do not make the child class, it cannot be accessed from outside the package.
Within the pkg we do not have to import pkg in other classes or extend A class to B it can directly be accessed.


Public: 
It can be accessed from within the class, outside the class, within the package and outside the package.



EXCEPTIONS:
Suppose I write 3 lines of code and donot know if it works or not. It need to catch that exception with message with out failing 

Suppose when we login a popup appears and we write scipt according to it to accpet the popup now this popup not appears so script will fail.
In this case we can write popup accpetance code in try block so if the script fails it wont stop


One try block can have multiple catch block.

Suppose in try block there are two types of exception in try block it will see the catch block as soon as it found catch for 1 exception it will show it ignoring 2nd catch.

try block include the code which might get fail
catch block will catch the exception

finally{
			//this block will be executed irrespective of exception thrown or not
			System.out.println("Delete Cookies");
			driver.close();
		}
	If we stop JVM forcefully then finally will not work 

Java Collection Framework:
is a collection of interfaces and classes which help in storing and processing dataefficiently.
It has some classes with usefulu functions


Collections:

LIST:
	Ordered Collection (sequence)
	List may contain duplicate elements:
	List gurrantee sequencial order
	Following are the classes which implements List interface
		ArrayList	
			[It has dynamic size ]
			[It accepts Duplicate values]
			[You can add and acess any element using index]
			[We do not have to traverse using for loop simply write obj of arrayy list in SOP it will print complete arraylist]
		LinkList
		
		Vector
		
	List interface has some methods which are used by above classes.
	Lists contain different methods like : delete element from specific index, add element on specific index

SET:
	A set is collection which can not contain duplicate elements
	Set does not gurrentee sequencial order
	These 3 classes implements set interface. 
		HashSet
			1. HashSet do not gurrante that element will store in squence
			2. Do not accepts duplicate values
			2.1 We do not have to traverse using for loop simply write obj of HashSet  in SOP it will print complete HashSet]
			3. It has a method call iterator which will iterate accross your hashset one by one
				> We should have obj of set (HashSet)
					HashSet<String> hs= new HashSet<String>();
					Iterator<String> i= hs.iterator(); 
						i.next(); // it will iterate from 1st element
					while(strI.hasNext()) {
			System.out.println(strI.next());
				}
				
		LinkedHashSet
		
		TreeSet
		
MAP:
	A map is an object that maps key value pair. A map can not contain key value pair 
		HashMap
			1. We do not have to traverse using for loop simply write obj of HashMap  in SOP it will print complete HashMap]
			2. Accpets duplicate value in different key
			3. If no key is available it will print null
		
		HashMap vs HashTable
			1. In hashmap there is no syncronization multiple threads can access hashmap at a time.
			1.1 In HashTable if a thread is using it then other thread need to wait for its turn.
			
			2. HashMap allows nul keys and null values
			2.1 HashTable donot allow null keys and null values
			
			3. Using HashMap we can perform this operation : 		// HashTable -> Pass to table set then print key and value using iterator
			3.1 Using HashTable we can not iterate it.
		TreeMap
		
		LinkedhashMap
	
	
************************************************************************************************************************************************************************************
																		Java interview questions
************************************************************************************************************************************************************************************

What is Runtime Polymorphism?
Runtime polymorphism or dynamic method dispatch is a process in which a call to an overridden method is resolved at runtime rather than at compile-time.

In this process, an overridden method is called through the reference variable of a super class. The 

 What is the difference between abstraction and encapsulation?
Abstraction hides the implementation details whereas encapsulation wraps code and data into a single unit.



 What is abstract class?
A class that is declared as abstract is known as abstract class. It needs to be extended and its method implemented. It cannot be instantiated.

 Can there be any abstract method without abstract class?
No, if there is any abstract method in a class, that class must be abstract.

Can you use abstract and final both with a method?
No, because abstract method needs to be overridden whereas you can't override final method.

Is it possible to instantiate the abstract class?
No, abstract class can never be instantiated.

What is interface?

Interface is a blueprint of a class that have static constants and abstract methods.It can be used to achieve fully abstraction and multiple inheritance.



 Can you declare an interface method static?

No, because methods of an interface is abstract by default, and static and abstract keywords can't be used together.

 Can an Interface be final?
No, because its implementation is provided by another class.

 What is marker interface?
An interface that have no data member and method is known as a marker interface.For example Serializable, Cloneable etc.

 What is difference between abstract class and interface?
Abstract class	Interface
1)An abstract class can have method body (non-abstract methods).	Interface have only abstract methods.
2)An abstract class can have instance variables.	An interface cannot have instance variables.
3)An abstract class can have constructor.	Interface cannot have constructor.
4)An abstract class can have static methods.	Interface cannot have static methods.
5)You can extends one abstract class.	You can implement multiple interfaces.
 Can we define private and protected modifiers for variables in interfaces?
No, they are implicitly public.

 When can an object reference be cast to an interface reference?
An object reference can be cast to an interface reference when the object implements the referenced interface.